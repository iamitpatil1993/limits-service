spring.application.name=limits-service
server.port=8080

# Spring clound config server config
spring.cloud.config.uri=http://localhost:8888

# Setting label to be used to fetch config so, 1. spring application name, 2. profile, 3. label will be used to get
# configs from config server. Example URI: http://localhost:8888/limits-service/int/temp
# default label is master, we can change it to different if we want to specify different branch name.
# Will be handy,if we want to test some functionality on feature branch. Just create feature branch in git 
# repository that spring cloud config server uses with our custom config and set label here with that branch name.
# No need to re-deploy or any other change in spring cloud config server. Same instance can be shared and use by 
# all developers, each one of them will just use different git branch of their own with custom config as they required
# for local testing
spring.cloud.config.label=master


# configure token to be passed to vault token. This token will be passed as a 'X-Config-Token' (which is required on
# spring cloud config server if vault profile is active on config server.
# Why client needs/SHOULD to pass authente to vault? -> Tokens can have policy attached to it. So, 
# policy allows access control in vault. So, we can control which service has access to which part of data in vault.
# If we store this token in config server, all services will use same token to get data from vault, so we can not
# define/control access to vault per service. 
# Changed to ID based token to avoid changing token while local testing. Using below command to in vault,
# vault token create -id="00000000-0000-0000-0000-000000000000" -policy="root"
spring.cloud.config.token=00000000-0000-0000-0000-000000000000




# Similar to git, we can get secrets from vault based on active profile. This config client passes this profile
# to config server while getting config and config server use this profiles to build vault secret path.
# We need to store secret in vaule KV secret engine as below path
# kv/{application-name},{profile}
# AND NOT as below, below will not work
# kv/{application-name}/{profile}
# So, below are secrets created in vault for dev,int and prod profiles for limit service as,
# limits-service -> Will be used in default/NO profile
# limits-service,dev  -> Will be used in dev profile
# limits-service,int  -> Will be used in int profile
# limits-service,prod  -> Will be used in prod profile
spring.profiles.active=dev